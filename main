<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Japanese Size Recommender</title>
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }
        body {
            font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
                'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue', sans-serif;
            -webkit-font-smoothing: antialiased;
            -moz-osx-font-smoothing: grayscale;
        }
        @keyframes fadeIn {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }
        .animate-fadeIn {
            animation: fadeIn 0.5s ease-out;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState } = React;

        // アイコンコンポーネント
        const ChevronRight = ({ className }) => (
            <svg className={className} width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                <polyline points="9 18 15 12 9 6"></polyline>
            </svg>
        );

        const Check = ({ className, strokeWidth }) => (
            <svg className={className} width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth={strokeWidth || 2} strokeLinecap="round" strokeLinejoin="round">
                <polyline points="20 6 9 17 4 12"></polyline>
            </svg>
        );

        function App() {
            const [step, setStep] = useState(0);
            const [formData, setFormData] = useState({
                height: '',
                weight: '',
                usualSize: '',
                brand: '',
                country: '',
                itemUrl: ''
            });
            const [result, setResult] = useState(null);

            const countries = [
                'United States', 'United Kingdom', 'Canada', 'Australia', 
                'Germany', 'France', 'Italy', 'Spain', 'China', 'Korea', 
                'Taiwan', 'Thailand', 'Singapore', 'India', 'Brazil'
            ];

            const uniqloSizes = ['XXS', 'XS', 'S', 'M', 'L', 'XL', 'XXL', 'XXXL'];
            const hmSizes = ['XXS', 'XS', 'S', 'M', 'L', 'XL', 'XXL'];

            const questions = [
                { 
                    key: 'height', 
                    title: 'What is your height?', 
                    subtitle: 'Please enter in centimeters',
                    type: 'number',
                    placeholder: 'e.g., 170'
                },
                { 
                    key: 'weight', 
                    title: 'What is your weight?', 
                    subtitle: 'Please enter in kilograms',
                    type: 'number',
                    placeholder: 'e.g., 65'
                },
                { 
                    key: 'brand', 
                    title: 'Which brand do you usually wear?', 
                    subtitle: 'Select your reference brand',
                    type: 'select',
                    options: ['UNIQLO', 'H&M']
                },
                { 
                    key: 'usualSize', 
                    title: 'What size do you usually wear?', 
                    subtitle: 'Your typical size in the selected brand',
                    type: 'size',
                },
                { 
                    key: 'country', 
                    title: 'Where are you from?', 
                    subtitle: 'This helps us understand regional size differences',
                    type: 'select',
                    options: countries
                },
                { 
                    key: 'itemUrl', 
                    title: 'Enter the Japanese apparel item URL', 
                    subtitle: 'Paste the product link you want to check',
                    type: 'text',
                    placeholder: 'https://...'
                }
            ];

            const handleNext = () => {
                const currentQuestion = questions[step];
                const value = formData[currentQuestion.key];
                
                if (!value || value.trim() === '') {
                    return;
                }
                
                if (step < questions.length - 1) {
                    setStep(step + 1);
                } else {
                    calculateRecommendation();
                }
            };

            const handleKeyPress = (e) => {
                if (e.key === 'Enter') {
                    handleNext();
                }
            };

            const calculateRecommendation = () => {
                const bmi = parseFloat(formData.weight) / Math.pow(parseFloat(formData.height) / 100, 2);
                const height = parseFloat(formData.height);
                
                let recommendedSize = formData.usualSize;
                let fitDescription = 'Perfect Fit';
                let advice = 'This size should fit you perfectly based on your usual size.';
                
                if (bmi < 18.5 && height < 165) {
                    fitDescription = 'May be slightly loose';
                    advice = 'Japanese sizes tend to run smaller. Your usual size might be a bit loose. Consider sizing down if you prefer a fitted look.';
                } else if (bmi > 25 || height > 180) {
                    fitDescription = 'May be slightly tight';
                    advice = 'Japanese sizes tend to run smaller than Western sizes. You might want to consider sizing up for comfort.';
                } else {
                    fitDescription = 'Perfect Fit';
                    advice = 'Based on your measurements, your usual size should work well for this item.';
                }
                
                setResult({
                    recommendedSize,
                    fitDescription,
                    advice
                });
            };

            const updateFormData = (key, value) => {
                setFormData({ ...formData, [key]: value });
            };

            const currentQuestion = questions[step];
            const progress = ((step + 1) / questions.length) * 100;

            if (result) {
                return (
                    <div className="min-h-screen flex items-center justify-center p-4" 
                         style={{ background: 'linear-gradient(135deg, #7a6edf 0%, #6ee09a 100%)' }}>
                        <div className="w-full max-w-2xl bg-white rounded-3xl shadow-2xl p-12 text-center animate-fadeIn">
                            <div className="w-20 h-20 bg-gradient-to-br from-[#7a6edf] to-[#6ee09a] rounded-full flex items-center justify-center mx-auto mb-6">
                                <Check className="w-12 h-12 text-white" strokeWidth={3} />
                            </div>
                            
                            <h2 className="text-3xl font-bold mb-4" style={{ color: '#7a6edf' }}>
                                Size Recommendation
                            </h2>
                            
                            <div className="bg-gradient-to-r from-[#7a6edf] to-[#6ee09a] text-white rounded-2xl p-8 mb-6">
                                <p className="text-lg mb-2 opacity-90">Recommended Size</p>
                                <p className="text-6xl font-bold">{result.recommendedSize}</p>
                                <p className="text-xl mt-4">{result.fitDescription}</p>
                            </div>
                            
                            <div className="bg-gray-50 rounded-xl p-6 mb-8">
                                <p className="text-gray-700 leading-relaxed">{result.advice}</p>
                            </div>
                            
                            <div className="grid grid-cols-2 gap-4 text-sm text-gray-600 mb-8">
                                <div className="bg-gray-50 rounded-lg p-4">
                                    <p className="font-semibold mb-1">Your Height</p>
                                    <p>{formData.height} cm</p>
                                </div>
                                <div className="bg-gray-50 rounded-lg p-4">
                                    <p className="font-semibold mb-1">Your Weight</p>
                                    <p>{formData.weight} kg</p>
                                </div>
                                <div className="bg-gray-50 rounded-lg p-4">
                                    <p className="font-semibold mb-1">Reference Brand</p>
                                    <p>{formData.brand}</p>
                                </div>
                                <div className="bg-gray-50 rounded-lg p-4">
                                    <p className="font-semibold mb-1">Usual Size</p>
                                    <p>{formData.usualSize}</p>
                                </div>
                            </div>
                            
                            <button 
                                onClick={() => { setStep(0); setResult(null); setFormData({height: '', weight: '', usualSize: '', brand: '', country: '', itemUrl: ''}); }}
                                className="px-8 py-3 rounded-full font-semibold text-white transition-all hover:shadow-lg"
                                style={{ background: 'linear-gradient(135deg, #7a6edf 0%, #6ee09a 100%)' }}>
                                Check Another Item
                            </button>
                        </div>
                    </div>
                );
            }

            return (
                <div className="min-h-screen flex items-center justify-center p-4" 
                     style={{ background: 'linear-gradient(135deg, #7a6edf 0%, #6ee09a 100%)' }}>
                    <div className="w-full max-w-3xl">
                        <div className="mb-8">
                            <div className="h-2 bg-white bg-opacity-30 rounded-full overflow-hidden">
                                <div 
                                    className="h-full bg-white transition-all duration-500 ease-out rounded-full"
                                    style={{ width: `${progress}%` }}
                                />
                            </div>
                        </div>
                        
                        <div className="bg-white rounded-3xl shadow-2xl p-12 min-h-[400px] flex flex-col">
                            <div className="mb-2 text-sm font-semibold" style={{ color: '#7a6edf' }}>
                                Question {step + 1} of {questions.length}
                            </div>
                            
                            <h2 className="text-4xl font-bold mb-3 text-gray-800">
                                {currentQuestion.title}
                            </h2>
                            
                            <p className="text-gray-500 mb-8">
                                {currentQuestion.subtitle}
                            </p>
                            
                            <div className="flex-1">
                                {(currentQuestion.type === 'number' || currentQuestion.type === 'text') && (
                                    <input
                                        type={currentQuestion.type}
                                        value={formData[currentQuestion.key]}
                                        onChange={(e) => updateFormData(currentQuestion.key, e.target.value)}
                                        onKeyPress={handleKeyPress}
                                        placeholder={currentQuestion.placeholder}
                                        className="w-full text-2xl px-0 py-4 border-b-4 border-gray-200 focus:border-[#7a6edf] outline-none transition-colors"
                                        autoFocus
                                    />
                                )}
                                
                                {currentQuestion.type === 'select' && (
                                    <div className="grid grid-cols-2 gap-3 max-h-80 overflow-y-auto">
                                        {currentQuestion.options.map((option) => (
                                            <button
                                                key={option}
                                                onClick={() => { updateFormData(currentQuestion.key, option); setTimeout(handleNext, 300); }}
                                                className="p-4 rounded-xl border-2 border-gray-200 hover:border-[#7a6edf] hover:bg-[#7a6edf] hover:bg-opacity-5 transition-all text-left font-medium"
                                            >
                                                {option}
                                            </button>
                                        ))}
                                    </div>
                                )}
                                
                                {currentQuestion.type === 'size' && (
                                    <div className="grid grid-cols-4 gap-3">
                                        {(formData.brand === 'UNIQLO' ? uniqloSizes : hmSizes).map((size) => (
                                            <button
                                                key={size}
                                                onClick={() => { updateFormData(currentQuestion.key, size); setTimeout(handleNext, 300); }}
                                                className="p-6 rounded-xl border-2 border-gray-200 hover:border-[#7a6edf] hover:bg-[#7a6edf] hover:bg-opacity-5 transition-all font-bold text-xl"
                                            >
                                                {size}
                                            </button>
                                        ))}
                                    </div>
                                )}
                            </div>
                            
                            {(currentQuestion.type === 'number' || currentQuestion.type === 'text') && (
                                <div className="mt-8 flex justify-between items-center">
                                    {step > 0 && (
                                        <button 
                                            onClick={() => setStep(step - 1)}
                                            className="px-6 py-3 text-gray-500 hover:text-gray-700 transition-colors">
                                            ← Back
                                        </button>
                                    )}
                                    
                                    <button 
                                        onClick={handleNext}
                                        disabled={!formData[currentQuestion.key]}
                                        className="ml-auto px-8 py-3 rounded-full font-semibold text-white transition-all disabled:opacity-40 disabled:cursor-not-allowed hover:shadow-lg flex items-center gap-2"
                                        style={{ background: 'linear-gradient(135deg, #7a6edf 0%, #6ee09a 100%)' }}>
                                        {step === questions.length - 1 ? 'Get Recommendation' : 'Next'}
                                        <ChevronRight className="w-5 h-5" />
                                    </button>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            );
        }

        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
</body>
</html>
